l_02_unzip2 — это функция
l_02_unzip2 () 
{ 
    local FNN=${FUNCNAME[0]};
    local PPWD=$PWD;
    local ARGS=("$@");
    local NARGS=$#;
    local fn_dr=${STL_D_PATH}/prc.d/boot_stl_fn.d;
    local prc_dr=${fn_dr}/__prc;
    local tst_dr=${fn_dr}/__tst;
    local ext_dr=${fn_dr}/__ext;
    local ext_dt_dr=${ext_dr}/_dt;
    local ext_dr_prc=${ext_dr}/_prc;
    local fn_nm=${fn_dr}/${FNN}.sh;
    local prc_nm=${prc_dr}/${FNN}.prc;
    local tst_nm_dr=${tst_dr}/${FNN};
    local tst_nm_ex_=${tst_nm_dr}/exec.tst;
    local tst_nm_fw_=${tst_nm_dr}/_flow_tst.sh;
    local tst_nm_fw1_=${tst_nm_dr}/_flow_tst_v1.sh;
    unset IFS;
    if ! [[ -d "${PPWD}" ]]; then
        echo -e "${ECHO_RET1}'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: NOT_DIR [{PPWD}] '${PPWD}' return 1${NRM}" 1>&2;
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 1;
    fi;
    if [[ "_go" == "$1" ]]; then
        l_02_edit ${fn_nm};
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_e_prc" == "$1" ]]; then
        l_02_edit ${prc_nm};
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_e_xxx" == "$1" ]]; then
        l_00_warn_p_r0 "You want change \"init block\" in ALL l_xx functions?";
        l_02_edit ${fn_dr};
        l_00_warn_p_r0 "Change _\XXX.sh";
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_e_tst_dr" == "$1" ]]; then
        l_02_edit ${tst_nm_dr};
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_tst" == "$1" ]]; then
        . ${tst_nm_dr}/exec.tst || { 
            cd "${PPWD}" || { 
                echo -e "${ECHO_RET1}'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: EXEC_FAIL '. ${tst_nm_dr}/${FNN}/exec.tst' return 1${NRM}" 1>&2;
                return 1
            };
            return 1
        };
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_flow" == "$1" ]]; then
        . ${tst_nm_dr}/_flow_tst.sh || { 
            cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
            return 1
        };
        cd "$PPWD" || l_00_echo_err "in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue";
        return 0;
    fi;
    if [[ "_flow_1" == "$1" ]]; then
        . ${tst_nm_dr}/_flow_tst_v1.sh || { 
            cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
            return 1
        };
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_rbld" == "$1" ]]; then
        . ${fn_dr}/_rbld_l_xx.sh ${FNN};
        . ${fn_dr}/$1.sh;
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "-h" == "$1" ]]; then
        echo -e "
MAIN: ${FNN} :: unzip \$1 [ to \$2 or to \$PWD if \$2 empty]
TAGS:
\$1 
[, \$2]
FLOW:   [if 
            -]
        
# HIE ${FNN} 
## CAUSA:
ПРИЧИНА создания:
## FORMULA:
СХЕМА решения:
## DOGMA:
РЕШЕНИЕ задачи:
### TST [as FLOW_1]
### FLOW_1
    - cd tst_dir
    - call with args: [] -> [true answer in res_file]
CNTL: 

    -h          : help
    _go         : edit body     : l_02_edit ${fn_nm}
    _rbld       : rebuild fn    : . ${fn_dr}/_rbld_l_xx.sh ${FNN}
    _tst        : tst fn        : . ${tst_nm_dr}/${FNN}/exec.tst
    _flow       : tst _flow     : . ${tst_nm_dr}/${FNN}/_flow_tst.sh
    _flow_1     : tst _flow_1   : . ${tst_nm_dr}/${FNN}/_flow_tst_v1.sh

    _e_prc      : edit fn.prc   : l_02_edit ${prc_nm}
    _e_tst_dr   : edit tst_nm_dr: l_02_edit ${tst_nm_dr}
    _e_xxx      : edit fl with \"init block\" for all fn : l_02_edit ${fn_dr}/${FNN}

RETU: (any {0} | if: [...] {0} | if [...] {1} | result>stdout, return 0 | data | change to ptr |  fs_structure | ...)
EXAM:   ${FNN} [, [, ]]
tree ${tst_nm_dr}/dir_init
├── dir_src_in
│   └── file_src_in
└── file_src

    rm -r dir_src dir_dist
    mkdir dir_dist
    cp -r dir_init dir_src

    cd dir_src || return 1
    zip file_src.zip file_src

    cd ${tst_nm_dr} || return 1
    l_02_unzip2 dir_src/file_src.zip dir_dist

    cd dir_src || return 1
    zip -r dir_src_in.zip dir_src_in

    cd ${tst_nm_dr} || return 1
    l_02_unzip2 dir_src/dir_src_in.zip dir_dist
    diff dir_dist/dir_src_in dir_src/dir_src_in
    #! unzip to $PWD

    rm -r dir_src dir_dist
    mkdir dir_dist
    cp -r dir_init dir_src

    cd dir_src || return 1
    zip file_src.zip file_src

    cd ${tst_nm_dr} || return 1
    mv dir_src/file_src dir_src/file_src~
    l_02_unzip2 dir_src/file_src.zip
    diff dir_src/file_src dir_src/file_src~ # true

    cd dir_src || return 1
    zip -r dir_src_in.zip dir_src_in

    cd ${tst_nm_dr} || return 1
    mv dir_src/dir_src_in dir_src/dir_src_in~
    l_02_unzip2 dir_src/dir_src_in.zip
    diff dir_src/dir_src_in dir_src/dir_src_in~ # true
";
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    [[ -n "$1" ]] || { 
        l_00_echo_ret1 "'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: EMPTY_ARG '\$1' return 1";
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 1
    };
    local ptr_path_1="$1";
    ptr_path_1="$(l_01_abs_path "${PPWD}" "ptr_path_1")";
    local ptr_path_2="$2";
    ptr_path_2="$(l_01_abs_path "${PPWD}" "ptr_path_2")";
    [[ -f ${ptr_path_1} ]] || { 
        l_00_echo_ret1 "'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: NOT_FILE 'file://${ptr_path_1}' where '\$1=$1' return 1";
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 1
    };
    if [[ -d "$ptr_path_2" ]]; then
        if [[ -n "$2" ]]; then
            unzip "${ptr_path_1}" -d "${ptr_path_2}" || { 
                l_00_echo_ret1 "'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: EXEC_FALSE 'unzip \"${ptr_path_1}\" -d \"$ptr_path_2\"' where '\$1=$1' '\$2=$2' return 1";
                cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
                return 1
            };
        else
            unzip "${ptr_path_1}" -d "$(dirname ${ptr_path_1})" || { 
                l_00_echo_ret1 "'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: EXEC_FALSE 'unzip \"${ptr_path_1}\" -d \"$ptr_path_2\"' where '\$1=$1' '\$2=$2' return 1";
                cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
                return 1
            };
        fi;
    else
        l_00_echo_ret1 "'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: NOT_DIR 'file://${ptr_path_2}' where '\$2=$2' return 1";
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 1;
    fi;
    cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
    return 0
}
