l_02_edit — это функция
l_02_edit () 
{ 
    local FNN=${FUNCNAME[0]};
    local PPWD=$PWD;
    local ARGS=("$@");
    local NARGS=$#;
    local fn_dr=${STL_D_PATH}/prc.d/boot_stl_fn.d;
    local prc_dr=${fn_dr}/__prc;
    local tst_dr=${fn_dr}/__tst;
    local ext_dr=${fn_dr}/__ext;
    local ext_dt_dr=${ext_dr}/_dt;
    local ext_dr_prc=${ext_dr}/_prc;
    local fn_nm=${fn_dr}/${FNN}.sh;
    local prc_nm=${prc_dr}/${FNN}.prc;
    local tst_nm_dr=${tst_dr}/${FNN};
    local tst_nm_ex_=${tst_nm_dr}/exec.tst;
    local tst_nm_fw_=${tst_nm_dr}/_flow_tst.sh;
    local tst_nm_fw1_=${tst_nm_dr}/_flow_tst_v1.sh;
    unset IFS;
    if ! [[ -d "${PPWD}" ]]; then
        echo -e "${ECHO_RET1}'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: NOT_DIR [{PPWD}] '${PPWD}' return 1${NRM}" 1>&2;
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 1;
    fi;
    if [[ "_go" == "$1" ]]; then
        l_02_edit ${fn_nm};
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_e_prc" == "$1" ]]; then
        l_02_edit ${prc_nm};
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_e_xxx" == "$1" ]]; then
        l_00_warn_p_r0 "You want change \"init block\" in ALL l_xx functions?";
        l_02_edit ${fn_dr};
        l_00_warn_p_r0 "Change _\XXX.sh";
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_e_tst_dr" == "$1" ]]; then
        l_02_edit ${tst_nm_dr};
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_tst" == "$1" ]]; then
        . ${tst_nm_dr}/exec.tst || { 
            cd "${PPWD}" || { 
                echo -e "${ECHO_RET1}'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: EXEC_FAIL '. ${tst_nm_dr}/${FNN}/exec.tst' return 1${NRM}" 1>&2;
                return 1
            };
            return 1
        };
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_flow" == "$1" ]]; then
        . ${tst_nm_dr}/_flow_tst.sh || { 
            cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
            return 1
        };
        cd "$PPWD" || l_00_echo_err "in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue";
        return 0;
    fi;
    if [[ "_flow_1" == "$1" ]]; then
        . ${tst_nm_dr}/_flow_tst_v1.sh || { 
            cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
            return 1
        };
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "_rbld" == "$1" ]]; then
        . ${fn_dr}/_rbld_l_xx.sh ${FNN};
        . ${fn_dr}/$1.sh;
        cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
        return 0;
    fi;
    if [[ "-h" == "$1" ]]; then
        echo -e "
MAIN: ${FNN} :: 
TAGS: 
\$1 
[, \$2]
CNTL: 

    -h          : help
    _go         : edit body     : l_02_edit ${fn_nm}
    _rbld       : rebuild fn    : . ${fn_dr}/_rbld_l_xx.sh ${FNN}
    _tst        : tst fn        : l_02_edit ${tst_nm_dr}/${FNN}/exec.tst

    _flow       : tst _flow     : . ${tst_nm_dr}/${FNN}/_flow_tst.sh
    _flow_1     : tst _flow_1   : . ${tst_nm_dr}/${FNN}/_flow_tst_v1.sh
    
    _e_prc      : edit fn.prc   : l_02_edit ${prc_nm}
    _e_tst_dr   : edit tst_nm_dr: l_02_edit ${tst_nm_dr}
    _e_xxx      : edit fl with \"init block\" for all fn : l_02_edit ${fn_dr}/l_02_edit

RETU: (any {0} | if: [...] {0} | if [...] {1})
EXAM:   ${FNN} [, [, ]]
";
        cd "${PPWD}" || { 
            echo -e "${ECHO_RET1}'$FNN() $*' in file://${fn_nm} , line=${LINENO} :: NOT_DIR [{PPWD}] '${PPWD}' return 1${NRM}" 1>&2;
            return 1
        };
        return 0;
    fi;
    echo -e "${ECHO_EXEC}'$FNN $*'${NRM}";
    if [[ -n "$1" ]]; then
        l_00_echo_code "THIS_ARG1=$1";
        ptr_path="$1";
    else
        l_00_echo_code "THIS_ARG1=$PPWD";
        ptr_path="$PPWD";
    fi;
    ptr_path=$(l_01_abs_path $PPWD "ptr_path");
    [ -e $ptr_path ] || { 
        l_00_echo_ret1 "in fs= file://${STL_D_PATH}/.stldrc  , line=${LINENO} : '$FNN() $*' :, EXEC: edit_boot_stl_fn $@ : NOT_ENTETY : 'file://$ptr_path' : return 1" 1>&2;
        cd $PPWD;
        return 1
    };
    if type "codium" 2> /dev/null; then
        l_00_echo_code "codium $ptr_path";
        codium $2 "$ptr_path";
    else
        if type "code" 2> /dev/null; then
            l_00_echo_code "code $ptr_path${NORMAL}";
            code $2 "$ptr_path";
        else
            if type "gvim" 2> /dev/null && type "mate-terminal" 2> /dev/null && [ -f $ptr_path ]; then
                l_00_echo_code "mate-terminal -- sh -c gvim -v +$2 $ptr_path${NORMAL}";
                mate-terminal -- sh -c "gvim -v +$2 $ptr_path";
            else
                if type "mc" 2> /dev/null && type "mate-terminal" 2> /dev/null && [ -f $ptr_path ]; then
                    l_00_echo_code "mate-terminal -- sh -c mc -e $ptr_path${NORMAL}";
                    mate-terminal -- sh -c "mc -e $ptr_path";
                else
                    if type "mc" 2> /dev/null && type "mate-terminal" 2> /dev/null && [ -d $ptr_path ]; then
                        l_00_echo_code "mate-terminal -- sh -c mc $ptr_path${NORMAL}";
                        mate-terminal -- sh -c "mc $ptr_path";
                    else
                        if type "vim" 2> /dev/null; then
                            l_00_echo_code "vim $ptr_path${NORMAL}";
                            gvim -v "$ptr_path";
                        else
                            l_00_echo_err "editors: codium, code, gvim, vim, mc not enabled" 1>&2;
                        fi;
                    fi;
                fi;
            fi;
        fi;
    fi;
    cd "$PPWD" || echo -e "${ECHO_WARN}in fs= file://${fn_nm} , line=${LINENO} , EXEC_FAIL : 'cd $PPWD' : continue${NRM}";
    return 0
}
