#!/bin/bash

dotstlrc_boot_stl() {

    local FNN=${FUNCNAME[0]}
    local PPWD=$PWD
    local sh_file=${HOME}/.stl.d/.stlrc
    # echo -e "${CYAN}--- $FNN() $* in file://${sh_file} ---${NORMAL}"
    echo -e "$FNN() in file://${sh_file}"

    c_up_boot_stl() {

        local FNN=${FUNCNAME[0]}
        local PPWD=$PWD

        echo "$FNN() $*"

        #! IFS to default value
        unset IFS

        if [[ -d "$1" ]]; then
            cd "$1" || {
                echo "FAIL_EXEC :: 'cd $1' :: return 1" >&2
                return 1
            }
        else
            echo "$1 is not dir" >&2
            return 1
        fi

        local dir=
        local item=
        local item_path=

        dir=$(pwd)

        for item in *; do

            item_path=$dir/$item

            if [ -f "$item_path" ] && [ "${item:0:1}" != "_" ] && [ "${item##*.}" == "sh" ]; then
                . "$item_path" || {
                    echo "EXEC_FAIL '. file://$item_path' :: return 1" >&2
                    cd ${PPWD}
                    return 1
                }

            elif [ -d "$item_path" ] && [ "${item:0:1}" != "_" ]; then
                c_up_boot_stl "$item_path" || {
                    echo "EXEC_FAIL 'c_up_boot_stl file://$item_path' :: return 1" >&2
                    cd ${PPWD}
                    return 1
                }
            fi

        done

        cd ${PPWD} || return 1
        return 0
    }

    #! up boot util fn and constants
    c_up_boot_stl ${HOME}/.stl.d/prc.d || {
        echo "EXEC_FAIL 'c_up_boot_stl ${HOME}/.stl.d/prc.d' :: return 1" >&2
        cd ${PPWD}
        return 1
    }

    #! define use_flag
    up_flag_boot_stl_fn ${HOME}/.stl.use.flag use_flag

    #! ~/.stl.use.flag :: check abort boot stl
    [[ 0 -eq $use_flag ]] && {
        warn_boot_stl_fn "\$use_flag = 0 :: ABORT_OPERATION boot stl :: return 0"
        cd ${PPWD}
        return 0
    }

    read -p "enter"
    #! ~/.stl.d/stl.boot.d/stl.boot.sh : stout, stderr > ~/.stl.d/stl.bashrc.d/bashrc.log

    #! IFS to default value
    unset IFS
    cd ${PPWD}
    return 0
}

dotstlrc_boot_stl || {
    echo "in file://${HOME}/.stl.d/.stlrc :: EXEC_FAIL 'dotstlrc_boot_stl ' :: return 1" >&2
}
